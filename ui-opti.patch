diff --git a/client/lib/utils.ts b/client/lib/utils.ts
new file mode 100644
index 0000000..ecb8873
--- /dev/null
+++ b/client/lib/utils.ts
@@ -0,0 +1,6 @@
+import { clsx, type ClassValue } from "clsx";
+import { twMerge } from "tailwind-merge";
+
+export function cn(...inputs: ClassValue[]) {
+  return twMerge(clsx(inputs));
+}
diff --git a/client/components/ui/AnimatedContainer.tsx b/client/components/ui/AnimatedContainer.tsx
new file mode 100644
index 0000000..a2a9d81
--- /dev/null
+++ b/client/components/ui/AnimatedContainer.tsx
@@ -0,0 +1,55 @@
+import { motion } from "framer-motion";
+import { ReactNode } from "react";
+
+interface AnimatedContainerProps {
+  children: ReactNode;
+  className?: string;
+  delay?: number;
+}
+
+export const AnimatedContainer = ({ 
+  children, 
+  className = "", 
+  delay = 0 
+}: AnimatedContainerProps) => {
+  return (
+    <motion.div
+      className={className}
+      initial={{ opacity: 0, y: 20 }}
+      animate={{ opacity: 1, y: 0 }}
+      exit={{ opacity: 0, y: -20 }}
+      transition={{ duration: 0.3, delay }}
+    >
+      {children}
+    </motion.div>
+  );
+};
+
+export const FadeIn = ({ 
+  children, 
+  className = "", 
+  delay = 0 
+}: AnimatedContainerProps) => {
+  return (
+    <motion.div
+      className={className}
+      initial={{ opacity: 0 }}
+      animate={{ opacity: 1 }}
+      transition={{ duration: 0.4, delay }}
+    >
+      {children}
+    </motion.div>
+  );
+};
+
+export const SlideIn = ({ 
+  children, 
+  className = "", 
+  delay = 0 
+}: AnimatedContainerProps) => {
+  return (
+    <motion.div
+      className={className}
+      initial={{ x: -20, opacity: 0 }}
+      animate={{ x: 0, opacity: 1 }}
+      transition={{ duration: 0.3, delay }}
+    >
+      {children}
+    </motion.div>
+  );
+};
diff --git a/client/components/ui/Button.tsx b/client/components/ui/Button.tsx
new file mode 100644
index 0000000..4f6c0eb
--- /dev/null
+++ b/client/components/ui/Button.tsx
@@ -0,0 +1,33 @@
+import { cn } from "../../lib/utils";
+import { forwardRef } from "react";
+
+export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
+  variant?: 'default' | 'secondary' | 'outline' | 'ghost' | 'link';
+  size?: 'default' | 'sm' | 'lg' | 'icon';
+}
+
+const Button = forwardRef<HTMLButtonElement, ButtonProps>(
+  ({ className, variant = "default", size = "default", ...props }, ref) => {
+    return (
+      <button
+        className={cn(
+          "inline-flex items-center justify-center rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none",
+          {
+            'bg-primary-600 text-white hover:bg-primary-700': variant === 'default',
+            'bg-secondary-600 text-white hover:bg-secondary-700': variant === 'secondary',
+            'border border-gray-300 bg-white hover:bg-gray-50': variant === 'outline',
+            'hover:bg-gray-100': variant === 'ghost',
+            'underline-offset-4 hover:underline text-primary-600': variant === 'link',
+            'h-10 py-2 px-4': size === 'default',
+            'h-9 px-3 text-sm': size === 'sm',
+            'h-11 px-8': size === 'lg',
+            'h-10 w-10 p-0': size === 'icon',
+          },
+          className
+        )}
+        ref={ref}
+        {...props}
+      />
+    );
+  }
+);
+Button.displayName = "Button";
+
+export { Button };
diff --git a/client/components/ui/Card.tsx b/client/components/ui/Card.tsx
new file mode 100644
index 0000000..54aa7e8
--- /dev/null
+++ b/client/components/ui/Card.tsx
@@ -0,0 +1,73 @@
+import { cn } from "../../lib/utils";
+import { forwardRef } from "react";
+
+interface CardProps extends React.HTMLAttributes<HTMLDivElement> {}
+
+const Card = forwardRef<HTMLDivElement, CardProps>(
+  ({ className, ...props }, ref) => (
+    <div
+      ref={ref}
+      className={cn(
+        "rounded-lg border border-gray-200 bg-white p-4 shadow-sm transition-all hover:shadow-md dark:border-gray-700 dark:bg-gray-800",
+        className
+      )}
+      {...props}
+    />
+  )
+);
+Card.displayName = "Card";
+
+const CardHeader = forwardRef<
+  HTMLDivElement,
+  React.HTMLAttributes<HTMLDivElement>
+>(({ className, ...props }, ref) => (
+  <div
+    ref={ref}
+    className={cn("flex flex-col space-y-1.5 p-2", className)}
+    {...props}
+  />
+));
+CardHeader.displayName = "CardHeader";
+
+const CardTitle = forwardRef<
+  HTMLParagraphElement,
+  React.HTMLAttributes<HTMLHeadingElement>
+>(({ className, ...props }, ref) => (
+  <h3
+    ref={ref}
+    className={cn("font-semibold text-lg dark:text-white", className)}
+    {...props}
+  />
+));
+CardTitle.displayName = "CardTitle";
+
+const CardDescription = forwardRef<
+  HTMLParagraphElement,
+  React.HTMLAttributes<HTMLParagraphElement>
+>(({ className, ...props }, ref) => (
+  <p
+    ref={ref}
+    className={cn("text-sm text-gray-500 dark:text-gray-400", className)}
+    {...props}
+  />
+));
+CardDescription.displayName = "CardDescription";
+
+const CardContent = forwardRef<
+  HTMLDivElement,
+  React.HTMLAttributes<HTMLDivElement>
+>(({ className, ...props }, ref) => (
+  <div ref={ref} className={cn("pt-0", className)} {...props} />
+));
+CardContent.displayName = "CardContent";
+
+const CardFooter = forwardRef<
+  HTMLDivElement,
+  React.HTMLAttributes<HTMLDivElement>
+>(({ className, ...props }, ref) => (
+  <div
+    ref={ref}
+    className={cn("flex items-center pt-4 mt-4 border-t border-gray-200 dark:border-gray-700", className)}
+    {...props}
+  />
+));
+CardFooter.displayName = "CardFooter";
+
+export { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter };
diff --git a/client/components/ui/ResponsiveLayout.tsx b/client/components/ui/ResponsiveLayout.tsx
new file mode 100644
index 0000000..c84df0e
--- /dev/null
+++ b/client/components/ui/ResponsiveLayout.tsx
@@ -0,0 +1,20 @@
+import { cn } from "../../lib/utils";
+import { ReactNode } from "react";
+
+interface ResponsiveLayoutProps {
+  children: ReactNode;
+  className?: string;
+}
+
+export function ResponsiveLayout({ children, className }: ResponsiveLayoutProps) {
+  return (
+    <div
+      className={cn(
+        "mx-auto w-full px-4 sm:px-6 lg:px-8 max-w-7xl",
+        className
+      )}
+    >
+      {children}
+    </div>
+  );
+}
diff --git a/client/components/ui/ThemeToggle.tsx b/client/components/ui/ThemeToggle.tsx
new file mode 100644
index 0000000..8e86db6
--- /dev/null
+++ b/client/components/ui/ThemeToggle.tsx
@@ -0,0 +1,46 @@
+import { useState, useEffect } from "react";
+import { Button } from "./Button";
+
+export function ThemeToggle() {
+  const [theme, setTheme] = useState<"light" | "dark">("light");
+
+  useEffect(() => {
+    // Check for dark mode preference
+    const storedTheme = localStorage.getItem("theme");
+    const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
+    
+    if (storedTheme === "dark" || (!storedTheme && prefersDark)) {
+      setTheme("dark");
+      document.documentElement.classList.add("dark");
+    } else {
+      setTheme("light");
+      document.documentElement.classList.remove("dark");
+    }
+  }, []);
+
+  const toggleTheme = () => {
+    const newTheme = theme === "light" ? "dark" : "light";
+    setTheme(newTheme);
+    localStorage.setItem("theme", newTheme);
+    
+    if (newTheme === "dark") {
+      document.documentElement.classList.add("dark");
+    } else {
+      document.documentElement.classList.remove("dark");
+    }
+  };
+
+  return (
+    <Button
+      variant="ghost"
+      size="icon"
+      onClick={toggleTheme}
+      aria-label={`Switch to ${theme === 'light' ? 'dark' : 'light'} theme`}
+    >
+      {theme === "light" ? (
+        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">
+          <path strokeLinecap="round" strokeLinejoin="round" d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z" />
+        </svg>
+      ) : (
+        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">
+          <path strokeLinecap="round" strokeLinejoin="round" d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z" />
+        </svg>
+      )}
+    </Button>
+  );
+}
diff --git a/client/styles/globals.css b/client/styles/globals.css
new file mode 100644
index 0000000..be9b3a7
--- /dev/null
+++ b/client/styles/globals.css
@@ -0,0 +1,49 @@
+@tailwind base;
+@tailwind components;
+@tailwind utilities;
+
+@layer base {
+  * {
+    @apply transition-colors duration-200;
+  }
+
+  /* Smooth scrolling */
+  html {
+    scroll-behavior: smooth;
+  }
+
+  body {
+    @apply bg-gray-50 text-gray-900 dark:bg-gray-900 dark:text-gray-100;
+  }
+
+  h1, h2, h3, h4, h5, h6 {
+    @apply font-display font-bold;
+  }
+  
+  h1 {
+    @apply text-3xl md:text-4xl;
+  }
+  
+  h2 {
+    @apply text-2xl md:text-3xl;
+  }
+  
+  h3 {
+    @apply text-xl md:text-2xl;
+  }
+}
+
+@layer components {
+  .container-layout {
+    @apply mx-auto w-full max-w-7xl px-4 sm:px-6 lg:px-8;
+  }
+  
+  .card-hover {
+    @apply transition-all duration-300 hover:shadow-lg hover:-translate-y-1;
+  }
+  
+  .form-input {
+    @apply w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm shadow-sm
+    focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500
+    dark:border-gray-700 dark:bg-gray-800 dark:text-white;
+  }
+}
diff --git a/tailwind.config.js b/tailwind.config.js
index e69de29..e8c1c35 100644
--- a/tailwind.config.js
+++ b/tailwind.config.js
@@ -0,0 +1,70 @@
+/** @type {import('tailwindcss').Config} */
+module.exports = {
+  darkMode: 'class',
+  content: [
+    "./index.html",
+    "./client/**/*.{js,ts,jsx,tsx}",
+    "./components/**/*.{js,ts,jsx,tsx}",
+  ],
+  theme: {
+    extend: {
+      colors: {
+        primary: {
+          50: '#f0f9ff',
+          100: '#e0f2fe',
+          200: '#bae6fd',
+          300: '#7dd3fc',
+          400: '#38bdf8',
+          500: '#0ea5e9',
+          600: '#0284c7',
+          700: '#0369a1',
+          800: '#075985',
+          900: '#0c4a6e',
+        },
+        secondary: {
+          50: '#f8fafc',
+          100: '#f1f5f9',
+          200: '#e2e8f0',
+          300: '#cbd5e1',
+          400: '#94a3b8',
+          500: '#64748b',
+          600: '#475569',
+          700: '#334155',
+          800: '#1e293b',
+          900: '#0f172a',
+        },
+      },
+      fontFamily: {
+        sans: ['Inter var', 'sans-serif'],
+        display: ['Lexend', 'sans-serif'],
+      },
+      spacing: {
+        '4xs': '0.125rem', // 2px
+        '3xs': '0.25rem',  // 4px
+        '2xs': '0.375rem', // 6px
+        'xs': '0.5rem',    // 8px
+        'sm': '0.75rem',   // 12px
+        'md': '1rem',      // 16px
+        'lg': '1.5rem',    // 24px
+        'xl': '2rem',      // 32px
+        '2xl': '3rem',     // 48px
+        '3xl': '4rem',     // 64px
+      },
+      borderRadius: {
+        'sm': '0.125rem',
+        DEFAULT: '0.25rem',
+        'md': '0.375rem',
+        'lg': '0.5rem',
+        'xl': '0.75rem',
+        '2xl': '1rem',
+      },
+      animation: {
+        'fade-in': 'fadeIn 0.3s ease-in-out',
+        'slide-up': 'slideUp 0.3s ease-in-out',
+      },
+      keyframes: {
+        fadeIn: {
+          '0%': { opacity: '0' },
+          '100%': { opacity: '1' },
+        },
+        slideUp: {
+          '0%': { transform: 'translateY(10px)', opacity: '0' },
+          '100%': { transform: 'translateY(0)', opacity: '1' },
+        },
+      },
+    },
+  },
+  plugins: [require('tailwindcss-animate')],
+}
diff --git a/package.json b/package.json
index e69de29..e1c997c 100644
--- a/package.json
+++ b/package.json
@@ -0,0 +1,5 @@
+  "dependencies": {
+    "@fontsource/inter": "^5.0.17",
+    "@fontsource/lexend": "^5.0.17",
+    "tailwind-merge": "^2.2.1"
+  }
